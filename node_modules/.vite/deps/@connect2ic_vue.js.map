{
  "version": 3,
  "sources": ["../../@xstate/vue/es/useActor.js", "../../@xstate/vue/es/useSelector.js", "../../@connect2ic/vue/src/context.ts", "../../@connect2ic/vue/src/composables/useDialog.ts", "../../@connect2ic/vue/src/composables/useProviders.ts", "../../@connect2ic/vue/src/composables/useConnect.ts", "../../@connect2ic/vue/src/composables/useWallet.ts", "../../@connect2ic/vue/src/composables/useBalance.ts", "../../@connect2ic/vue/src/composables/useTransfer.ts", "../../@connect2ic/vue/src/composables/useCanister.ts", "../../@connect2ic/vue/src/components/ConnectButton.vue", "../../@connect2ic/vue/src/components/ConnectDialog.vue", "../../@connect2ic/vue/src/Connect2ICProvider.vue"],
  "sourcesContent": ["import { shallowRef, isRef, watch } from 'vue';\nexport function isActorWithState(actorRef) {\n    return 'state' in actorRef;\n}\nvar noop = function () {\n    /* ... */\n};\nexport function defaultGetSnapshot(actorRef) {\n    return 'getSnapshot' in actorRef\n        ? actorRef.getSnapshot()\n        : isActorWithState(actorRef)\n            ? actorRef.state\n            : undefined;\n}\nexport function useActor(actorRef, getSnapshot) {\n    if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }\n    var actorRefRef = isRef(actorRef) ? actorRef : shallowRef(actorRef);\n    var state = shallowRef(getSnapshot(actorRefRef.value));\n    var send = function (event) {\n        actorRefRef.value.send(event);\n    };\n    watch(actorRefRef, function (newActor, _, onCleanup) {\n        state.value = getSnapshot(newActor);\n        var unsubscribe = newActor.subscribe({\n            next: function (emitted) { return (state.value = emitted); },\n            error: noop,\n            complete: noop\n        }).unsubscribe;\n        onCleanup(function () { return unsubscribe(); });\n    }, {\n        immediate: true\n    });\n    return { state: state, send: send };\n}\n", "import { onMounted, onBeforeUnmount, shallowRef } from 'vue';\nimport { defaultGetSnapshot } from './useActor';\nvar defaultCompare = function (a, b) { return a === b; };\nexport function useSelector(actor, selector, compare, getSnapshot) {\n    if (compare === void 0) { compare = defaultCompare; }\n    if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }\n    var selected = shallowRef(selector(getSnapshot(actor)));\n    var updateSelectedIfChanged = function (nextSelected) {\n        if (!compare(selected.value, nextSelected)) {\n            selected.value = nextSelected;\n        }\n    };\n    var sub;\n    onMounted(function () {\n        var initialSelected = selector(getSnapshot(actor));\n        updateSelectedIfChanged(initialSelected);\n        sub = actor.subscribe(function (emitted) {\n            var nextSelected = selector(emitted);\n            updateSelectedIfChanged(nextSelected);\n        });\n    });\n    onBeforeUnmount(function () {\n        sub === null || sub === void 0 ? void 0 : sub.unsubscribe();\n    });\n    return selected;\n}\n", "import type { InjectionKey, Ref } from \"vue\"\nimport type { createClient } from \"@connect2ic/core\"\n\nexport type ContextState = {\n  client: ReturnType<typeof createClient>\n  dialog: {\n    open: () => void\n    close: () => void\n    isOpen: Ref<boolean>\n  }\n}\n\nconst contextKey: InjectionKey<ContextState> = Symbol()\n\nexport { contextKey }\n", "import { contextKey } from \"../context\"\nimport {inject} from \"vue\"\n\nexport function useDialog() {\n  const context = inject(contextKey)\n  return {\n    ...context.dialog\n  }\n}", "import { contextKey } from \"../context\"\nimport { useSelector } from \"@xstate/vue\"\nimport { inject } from \"vue\"\n\nexport function useProviders() {\n  const {client} = inject(contextKey)\n  return useSelector(client._service, (state) => state.context.providers)\n}\n", "import { inject, computed, watch, onMounted, onUnmounted } from \"vue\"\nimport { useSelector } from \"@xstate/vue\"\nimport { contextKey } from \"../context\"\nimport { useActor } from \"@xstate/vue\"\n\ntype Props = {\n  onConnect?: () => void\n  onDisconnect?: () => void\n}\n\nconst useConnect = (props: Props = {}) => {\n  const {\n    onConnect = () => {\n    },\n    onDisconnect = () => {\n    },\n  } = props\n  const { client } = inject(contextKey)\n  const principal = useSelector(client._service, state => state.context.principal)\n  const activeProvider = useSelector(client._service, state => state.context.activeProvider)\n  // @ts-ignore\n  const status = useSelector(client._service, state => state.value.idle)\n  const { state } = useActor(client._service)\n  const isConnected = computed(() => state.value.matches({ idle: \"connected\" }) ?? false)\n  const isInitializing = computed(() => state.value.matches({ idle: \"initializing\" }) ?? false)\n  const isConnecting = computed(() => state.value.matches({ idle: \"connecting\" }) ?? false)\n  const isDisconnecting = computed(() => state.value.matches({ idle: \"disconnecting\" }) ?? false)\n  const isIdle = computed(() => state.value.matches({ idle: \"idle\" }) ?? false)\n\n  let unsub\n  let unsub2\n  onMounted(() => {\n    unsub = client.on(\"connect\", onConnect)\n    unsub2 = client.on(\"disconnect\", onDisconnect)\n  })\n  onUnmounted(() => {\n    unsub()\n    unsub2()\n  })\n\n  return {\n    principal,\n    status,\n    activeProvider,\n    isConnected,\n    isConnecting,\n    isDisconnecting,\n    isInitializing,\n    isIdle,\n    connect: (provider) => {\n      client._service.send({ type: \"CONNECT\", data: { provider } })\n    },\n    disconnect: () => {\n      client._service.send({ type: \"DISCONNECT\" })\n    },\n  }\n}\n\nexport { useConnect }", "import { useConnect } from \"./useConnect\"\nimport type { IConnector, IWalletConnector } from \"@connect2ic/core\"\nimport { computed, ref } from \"vue\"\nimport type { Ref } from \"vue\"\n\nexport const useWallet = () => {\n  const { isConnected, activeProvider } = useConnect()\n  const supportsWallet = computed(() => !!activeProvider.value?.meta.features.includes(\"wallet\"))\n  const wallet: Ref<IConnector & Partial<IWalletConnector> | undefined> = computed(() => {\n    return isConnected.value && supportsWallet.value && activeProvider.value ? (activeProvider.value as IConnector & Partial<IWalletConnector>) : undefined\n  })\n  const loading = ref(true)\n  const error = ref(false)\n\n  return [wallet, { loading, error }] as const\n}\n", "import { useWallet } from \"./useWallet\"\nimport { ref, watch } from \"vue\"\n\ntype Asset = {\n  amount: number\n  canisterId: string\n  decimals: number\n  image?: string\n  name: string\n  symbol: string\n}\n\nexport const useBalance = () => {\n  // TODO: check if supported or not\n  const [wallet] = useWallet()\n  // TODO:\n  const error = ref()\n  const loading = ref(true)\n  const assets = ref()\n\n  // TODO: fix\n  const refetch = async () => {\n    const $wallet = wallet.value\n    if (!$wallet) {\n      assets.value = undefined\n      return\n    }\n    const result = await $wallet.queryBalance?.()\n    assets.value = result\n    loading.value = false\n    return result\n  }\n\n  watch(wallet, ($wallet) => {\n    refetch()\n  })\n\n  return [assets, { loading, error, refetch }] as const\n}\n", "import { useConnect } from \"./useConnect\"\nimport { useWallet } from \"./useWallet\"\nimport { ref } from \"vue\"\n\ntype Props = {\n  amount: number,\n  to: string,\n  from?: string,\n}\n\nexport const useTransfer = ({ amount, to, from = undefined }: Props) => {\n  // TODO: check if supported or not\n  const [wallet] = useWallet()\n  const { principal } = useConnect()\n  const loading = ref(true)\n  const error = ref()\n\n  const transfer = async () => {\n    const $wallet = wallet.value\n    if (!$wallet) {\n      return\n    }\n    loading.value = true\n    const result = await $wallet.requestTransfer?.({\n      amount,\n      to,\n    }).catch(e => {\n      error.value = e\n    })\n    loading.value = false\n    return result\n  }\n\n  return [transfer, { loading, error }] as const\n}\n", "import { useConnect } from \"./useConnect\"\nimport { useSelector } from \"@xstate/vue\"\nimport { inject, ref, computed } from \"vue\"\nimport type { Ref } from \"vue\"\nimport { contextKey } from \"../context\"\nimport type { ActorSubclass } from \"@dfinity/agent\"\n\nexport const useCanister = (\n  canisterName: string,\n  options: { mode: string } = {\n    mode: \"auto\", // \"anonymous\" | \"connected\"\n  },\n) => {\n  const { mode } = options\n  const { client } = inject(contextKey)\n  const anonymousActor = useSelector(client._service, (state) => state.context.anonymousActors[canisterName])\n  const actor = useSelector(client._service, (state) => state.context.actors[canisterName])\n  const { isConnected } = useConnect()\n  // @ts-ignore\n  const canister: Ref<ActorSubclass> = computed(() => {\n    return isConnected.value && actor.value && mode !== \"anonymous\" ? actor.value : anonymousActor.value\n  })\n  // TODO:\n  const loading = computed(() => !canister.value)\n  const error = ref(false)\n\n  return [canister, { error, loading }] as const\n}\n", "<script setup lang=\"ts\">\nimport { useConnect, useDialog } from \"../composables\"\n\nconst emit = defineEmits([\"onConnect\", \"onDisconnect\"])\nconst props = defineProps({\n  dark: {\n    type: Boolean,\n    default: false,\n  },\n  style: {\n    type: String,\n    default: \"\",\n  },\n})\n\nconst { open } = useDialog()\n\nconst onConnect = () => {\n  emit(\"onConnect\", {})\n}\n\nconst onDisconnect = () => {\n  emit(\"onDisconnect\", {})\n}\n\nlet { isConnected, disconnect } = useConnect({\n  // providers,\n  onConnect,\n  onDisconnect,\n})\n\n</script>\n\n<template>\n  <button v-if=\"isConnected\" class=\"connect-button\" @click=\"() => disconnect()\">\n    Disconnect\n  </button>\n\n  <button v-if=\"!isConnected\" class=\"connect-button\" @click=\"() => open()\">\n    Connect\n  </button>\n</template>\n\n", "<script setup lang=\"ts\">\nimport { onMounted, onUnmounted, watch } from \"vue\"\nimport { useConnect, useDialog, useProviders } from \"../composables\"\n\nconst { isOpen, close, open } = useDialog()\nconst providers = useProviders()\n\nconst { connect } = useConnect({\n  onConnect: () => {\n    close()\n  },\n})\n\nwatch(isOpen, ($isOpen) => {\n  if ($isOpen) {\n    document.body.style.overflow = \"hidden\"\n  }\n  if (!$isOpen) {\n    document.body.style.overflow = \"unset\"\n  }\n})\n\nconst emit = defineEmits([\"onClose\", \"onClickInside\"])\nconst onClose = () => {\n  close()\n  emit(\"onClose\")\n}\n\nconst onClickInside = (e) => {\n  e.stopPropagation()\n  emit(\"onClickInside\")\n}\n\nconst { dark = false } = defineProps<{\n  dark?: boolean\n}>()\n\nconst handleEsc = (event) => {\n  if (event.keyCode === 27) {\n    close()\n  }\n}\nonMounted(() => window.addEventListener(\"keydown\", handleEsc))\nonUnmounted(() => window.removeEventListener(\"keydown\", handleEsc))\n\n</script>\n\n<template>\n  <div v-if=\"isOpen\" :class=\"`dialog-styles ${dark ? ' dark' : ' light'}`\" @click=\"onClose\">\n    <div @click=\"onClickInside\" class=\"dialog-container\">\n      <div>\n        <button v-for=\"provider in providers\" :key=\"provider.meta.id\" @click=\"() => connect(provider.meta.id)\"\n                :class=\"`button-styles ${provider.meta.id}-styles`\">\n          <img class=\"img-styles\" :src=\"dark ? provider.meta.icon.dark : provider.meta.icon.light\" />\n          <div>\n            <span class=\"button-label\">{{ provider.meta.name }}</span>\n          </div>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>", "<script setup lang=\"ts\">\nimport { ref, provide } from \"vue\"\nimport { contextKey } from \"./context\"\nimport type { createClient } from \"@connect2ic/core\"\n\nlet open = ref(false)\nconst dialog = {\n  open: () => {\n    open.value = true\n  },\n  close: () => {\n    open.value = false\n  },\n  isOpen: open,\n}\n\nconst { client } = defineProps<{\n  client: ReturnType<typeof createClient>\n}>()\n\nprovide(contextKey, {\n  dialog,\n  client,\n})\n\n</script>\n<template>\n  <slot></slot>\n</template>\n"],
  "mappings": "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",
  "names": ["_", "b", "contextKey", "Symbol", "useDialog", "inject", "dialog", "useProviders", "client", "useSelector", "_service", "state", "context", "providers", "useConnect", "props", "onConnect", "onDisconnect", "principal", "activeProvider", "status", "value", "idle", "useActor", "isConnected", "computed", "matches", "isInitializing", "isConnecting", "isDisconnecting", "isIdle", "unsub", "unsub2", "onMounted", "on", "onUnmounted", "connect", "provider", "send", "type", "data", "disconnect", "useWallet", "supportsWallet", "meta", "features", "includes", "undefined", "loading", "ref", "error", "useBalance", "wallet", "assets", "refetch", "async", "$wallet", "result", "queryBalance", "watch", "useTransfer", "amount", "to", "from", "requestTransfer", "catch", "e", "useCanister", "canisterName", "options", "mode", "anonymousActor", "anonymousActors", "actor", "actors", "canister", "open", "emit", "n", "isOpen", "close", "$isOpen", "document", "body", "style", "overflow", "onClose", "onClickInside", "stopPropagation", "handleEsc", "event", "keyCode", "window", "addEventListener", "removeEventListener", "provide"]
}
